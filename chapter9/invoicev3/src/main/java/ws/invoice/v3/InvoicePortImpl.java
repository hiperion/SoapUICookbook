/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package ws.invoice.v3;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.logging.Logger;

import org.h2.tools.Server;

/**
 * This class was generated by Apache CXF 3.0.1 2014-08-18T13:37:51.065+01:00
 * Generated source version: 3.0.1
 * 
 */

@javax.jws.WebService(serviceName = "InvoiceServiceV3", portName = "InvoicePort", targetNamespace = "http://soapui.cookbook.samples/contract/invoice", wsdlLocation = "invoice_v3.wsdl", endpointInterface = "ws.invoice.v3.InvoicePortType")
public class InvoicePortImpl implements InvoicePortType {

	private static final Logger LOG = Logger.getLogger(InvoicePortImpl.class
			.getName());
	private Connection dbConnection;

	public static String DB_FILE_LOCATION = "./invoicev3-testdb";

	public InvoicePortImpl() throws Exception {
		// Start the H2 database in MIXED mode - this means we can allow
		// access via the web console (HTTP)
		// and use a (faster) embedded connection for the service's
		// backend.
		// See http://www.h2database.com/html/features.html#connection_modes
		Server server = Server.createWebServer("-web", "-webAllowOthers",
				"-webPort", "9081");
		server.start();
		// Alternatively use a TCP server connection to allow connections from
		// other JDBC clients
		// e.g. Squirrel - connection string will then be like
		//jdbc:h2:tcp://localhost:9082/./invoicev3-testdb
		//Server server2 = Server.createTcpServer("-tcpPort", "9082");
		//server2.start();
		System.out
				.println("You can access the database remotely now, using the URL:");
		System.out.println("http://localhost:9081/" + DB_FILE_LOCATION
				+ " (user: '', password: '')");

		Class.forName("org.h2.Driver");
		dbConnection = DriverManager.getConnection("jdbc:h2:"
				+ DB_FILE_LOCATION);

		Statement sqlStatment = dbConnection.createStatement();
		sqlStatment
				.execute("create table if not exists invoices(id identity primary key, invoiceNo varchar(255),"
						+ " customerRef varchar(255), amount varchar(255), dueDate date, lastUpated timestamp default NOW())");
		sqlStatment.close();
		System.out.println("invoices table created...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ws.invoice.v3.InvoicePortType#deleteInvoice(java.lang.String
	 * invoiceNo )*
	 */
	public void deleteInvoice(java.lang.String invoiceNo) {
		LOG.info("Executing operation deleteInvoice");
		System.out.println("NOT YET IMPLEMENTED");
		System.out.println(invoiceNo);
		try {
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ws.invoice.v3.InvoicePortType#createInvoice(java.lang.String id
	 * ,)java.lang.String customerRef ,)double amount
	 * ,)javax.xml.datatype.XMLGregorianCalendar dueDate )*
	 */
	public java.lang.String createInvoice(java.lang.String id,
			java.lang.String customerRef, double amount,
			javax.xml.datatype.XMLGregorianCalendar dueDate) {
		//LOG.info("Executing operation createInvoice");
		//System.out.println(id);
		//System.out.println(customerRef);
		//System.out.println(amount);
		//System.out.println(dueDate);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		GregorianCalendar dueDateGregorianCalendar = dueDate
				.toGregorianCalendar();
		dateFormat.setCalendar(dueDateGregorianCalendar);
		String dueDateFormatted = dateFormat.format(dueDateGregorianCalendar
				.getTime());

		try {
			Statement sqlStatment = dbConnection.createStatement();
			sqlStatment
					.execute("INSERT INTO invoices(invoiceNo, customerRef, amount, dueDate) VALUES('"
							+ id
							+ "', '"
							+ customerRef
							+ "', '"
							+ amount
							+ "', '" + dueDateFormatted + "')");
			sqlStatment.close();
		} catch (SQLException e) {
			System.out.println("There was a problem creating invoice with id: "
					+ id);
			e.printStackTrace();
		}

		return id;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ws.invoice.v3.InvoicePortType#retrieveInvoice(java.lang.String
	 * invoiceNo ,)java.lang.String id ,)java.lang.String customerRef
	 * ,)java.lang.Double amount ,)javax.xml.datatype.XMLGregorianCalendar
	 * dueDate )*
	 */
	public void retrieveInvoice(java.lang.String invoiceNo,
			javax.xml.ws.Holder<java.lang.String> id,
			javax.xml.ws.Holder<java.lang.String> customerRef,
			javax.xml.ws.Holder<java.lang.Double> amount,
			javax.xml.ws.Holder<javax.xml.datatype.XMLGregorianCalendar> dueDate) {
		LOG.info("Executing operation retrieveInvoice");
		System.out.println("NOT YET IMPLEMENTED");
		System.out.println(invoiceNo);
		try {
			java.lang.String idValue = "12345";
			id.value = idValue;
			java.lang.String customerRefValue = "3333";
			customerRef.value = customerRefValue;
			java.lang.Double amountValue = 100.0d;
			amount.value = amountValue;
			javax.xml.datatype.XMLGregorianCalendar dueDateValue = null;
			dueDate.value = dueDateValue;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ws.invoice.v3.InvoicePortType#updateInvoice(java.lang.String id
	 * ,)java.lang.String customerRef ,)double amount
	 * ,)javax.xml.datatype.XMLGregorianCalendar dueDate )*
	 */
	public java.lang.String updateInvoice(java.lang.String id,
			java.lang.String customerRef, double amount,
			javax.xml.datatype.XMLGregorianCalendar dueDate) {
		LOG.info("Executing operation updateInvoice");
		System.out.println("NOT YET IMPLEMENTED");
		System.out.println(id);
		System.out.println(customerRef);
		System.out.println(amount);
		System.out.println(dueDate);
		try {
			java.lang.String _return = "";
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
