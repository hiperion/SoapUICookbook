<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="d2bc33a6-e9ea-4c83-9a67-ce5502761c66" activeEnvironment="Default" name="GoogleOAuth2" resourceRoot="" soapui-version="5.1.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="6171d009-e73f-44d8-9d71-851f612818c1" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://www.googleapis.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://www.googleapis.com</con:endpoint></con:endpoints><con:resource name="149bd5f146767700" path="/gmail/v1/users/&lt;your gmail account>/messages/149bd5f146767700" id="6410dd1c-738e-409b-b663-a913011a9a95"><con:settings/><con:parameters/><con:method name="Method 1" id="aeeccc34-5e31-4c38-908c-9bfff0fbacd7" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bd5="https://www.googleapis.com/gmail/v1/users/always.rupert@gmail.com/messages/149bd5f146767700">bd5:Response</con:element></con:representation><con:request name="GetASingleMessage" id="8ca7fb70-d0f9-4703-84b3-7cb2997c824c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://www.googleapis.com</con:endpoint><con:request/><con:originalUri>https://www.googleapis.com/gmail/v1/users/always.rupert@gmail.com/messages/149bd5f146767700</con:originalUri><con:credentials><con:selectedAuthProfile>GoogleProfile</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="messages" path="/gmail/v1/users/&lt;your gmail account>/messages" id="88121e0d-a2d2-4669-b735-922fd5375c4d"><con:settings/><con:parameters><con:parameter><con:name>q</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="bd8a7942-fd6f-459d-89c7-5f07f99678fe" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:mes="https://www.googleapis.com/gmail/v1/users/always.rupert@gmail.com/messages">mes:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:mes="https://www.googleapis.com/gmail/v1/users/always.rupert@gmail.com/messages">mes:Fault</con:element></con:representation><con:request name="SearchEmail" id="ce1789a4-cc7a-4a87-a60d-e0fda0aa0940" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://www.googleapis.com</con:endpoint><con:request/><con:originalUri>https://www.googleapis.com/gmail/v1/users/always.rupert@gmail.com/messages</con:originalUri><con:credentials><con:selectedAuthProfile>GoogleProfile</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="q" value="subject:o12345" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>q</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="221128f2-eea8-404a-afa3-2412f5680b37" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://localhost:9001" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:9001</con:endpoint></con:endpoints><con:resource name="Oauth2callback" path="/oauth2callback" id="36d0f6ae-623d-479e-882f-2e4165f5e9bf"><con:settings/><con:parameters/><con:method name="Oauth2callback" id="73969695-1161-408e-b1e7-4399df57e11d" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="17be6bc0-a65a-4e6c-9c72-155ff13425d7" mediaType="application/json"><con:settings/><con:endpoint>https://localhost:9001</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="e5872878-fd7e-4914-b146-e5754a7265af" port="9001" path="/" host="localhost" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/oauth2callback" method="GET" resourcePath="/oauth2callback" id="76e3e5a8-14bf-451a-be5f-6286e417ccf7"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="bf388d7e-f106-45e0-88aa-41fdf8360201" httpResponseStatus="200" mediaType="text/xml"><con:settings/><con:script>def requestPath = mockRequest.getPath()
def headers = mockRequest.getRequestHeaders()
log.info "Path: "+ requestPath
log.info "Headers: "+headers
log.info "Query String: " + mockRequest.httpRequest.queryString
log.info "Query Content: " + mockRequest.requestContent</con:script><con:responseContent>&lt;xml>Hello&lt;/xml></con:responseContent></con:response></con:restMockAction></con:restMockService><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>GoogleProfile</con:name><con:clientID>816217843371-u152n41nn1a0lr25a1ft3t2tdu0nf50a.apps.googleusercontent.com</con:clientID><con:clientSecret>gMAr8ud8pzEhemK-vRL9s4_E</con:clientSecret><con:authorizationURI>https://accounts.google.com/o/oauth2/auth</con:authorizationURI><con:accessTokenURI>https://accounts.google.com/o/oauth2/token</con:accessTokenURI><con:redirectURI>https://localhost:9001/oauth2callback</con:redirectURI><con:accessToken>ya29.yQClSRioDTqGODFKRH3IEdvQkayQnufeaL-XX-GcQUMpxzQRaJj73WAYRR4DLcfaENF3aOYf1b0Rwg</con:accessToken><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:scope>https://www.googleapis.com/auth/gmail.readonly</con:scope><con:accessTokenStatus xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:accessTokenStartingStatus>RETRIEVED_FROM_SERVER</con:accessTokenStartingStatus><con:accessTokenExpirationTime>3600</con:accessTokenExpirationTime><con:accessTokenIssuedTime>1416939030</con:accessTokenIssuedTime><con:javaScripts><con:entry>if (document.getElementById('Email')){
document.getElementById('Email').value='&lt;your gmail account>';
document.getElementById('Passwd').value='&lt;your password>';
document.getElementById('gaia_loginform').submit();
}</con:entry><con:entry>setTimeout(function(){document.getElementById('submit_approve_access').click()}, 3000);</con:entry></con:javaScripts><con:manualAccessTokenExpirationTime>10</con:manualAccessTokenExpirationTime><con:useManualAccessTokenExpirationTime>false</con:useManualAccessTokenExpirationTime><con:manualAccessTokenExpirationTimeUnit>SECONDS</con:manualAccessTokenExpirationTimeUnit></con:oAuth2Profile></con:oAuth2ProfileContainer><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>